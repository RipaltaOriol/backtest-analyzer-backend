
import os
import json
import numpy as np
import pandas as pd

from app import app
from io import BytesIO, StringIO
from flask import send_file
from datetime import datetime
from app.models.Setup import Setup

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.set_loglevel("info")

import reportlab
from reportlab.lib import colors
from reportlab.lib.units import mm
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, NextPageTemplate, PageBreak, Frame, PageTemplate

""" Adds page number to PDF
"""
class NumberedCanvas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        """add page info to each page (page x of y)"""
        num_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(num_pages)
            print(self)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)

    def draw_page_number(self, page_count):
        self.setFont('Montserrat', 10)
        self.drawRightString(135*mm, 20*mm, 'Generated by Backtest Analyser')
        self.drawRightString(200*mm, 20*mm,
            "Page %d of %d" % (self._pageNumber, page_count))

""" Gets a file with the Setup to download
"""
def get_file(setup_id):
    # buffer to keep the PDF in memory
    buffer = BytesIO()
    # get current date
    date = datetime.today().strftime('%d-%m-%Y')
    # NOTE: ensure authentication
    # get current Setup
    setup = Setup.objects(id = setup_id).get() # this query should not be like this
    temp = json.dumps(setup.state)
    data = pd.read_json(StringIO(temp), orient='table')
    data.drop(['.s'], axis = 1, inplace = True, errors='ignore')
    print(data.dtypes)
    
    
    # registers font
    reportlab.rl_config.TTFSearchPath.append(os.path.join(app.root_path, app.config['FONTS_FOLDER'], 'Montserrat/static'))
    pdfmetrics.registerFont(TTFont('Montserrat', 'Montserrat-Regular.ttf'))

    # PDF styles
    style = getSampleStyleSheet()
    style['title'].fontName = 'Montserrat'
    style['title'].fontSize = 14
    style['title'].alignment = TA_LEFT

    style.add(ParagraphStyle(name='date', alignment=TA_RIGHT, fontSize = 11, fontName = 'Montserrat'))
    style.add(ParagraphStyle(name='subtitle', parent=style['Normal'], fontName = 'Montserrat', fontSize = 11))
    style.add(ParagraphStyle(name='table_header', parent=style['Normal'], fontName = 'Montserrat', fontSize = 11, textColor = colors.white, alignment = TA_CENTER))
    style.add(ParagraphStyle(name='section_body', parent=style['Normal'], fontName = 'Montserrat', fontSize = 11))
    table_style = TableStyle([
            ('LEFTPADDING',(0,0),(-1,-1), 0),
            ('RIGHTPADDING',(0,0),(-1,-1), 0)
    ])

    # create document
    doc = SimpleDocTemplate(buffer, pagesize=A4, title=f"{setup.name}-report.pdf")
    a4_frame = Frame(doc.leftMargin, doc.bottomMargin, doc.width, doc.height, id='a4_frame')
    landscape_frame = Frame(doc.leftMargin, doc.bottomMargin, doc.height, doc.width, id='landscape_frame')

    elements = []

    elements.append(Table([
        [Paragraph(setup.documentId.name, style['title']),
        Paragraph(date, style['date'])]
    ], style=table_style))

    elements.append(Paragraph(setup.name, style['title']))
    if setup.notes:
        elements.append(Paragraph('<u>Notes</u>', style['subtitle']))
        elements.append(Spacer(1, 5))
        elements.append(Paragraph(setup.notes, style['section_body']))
        elements.append(Spacer(1, 15))
    

    if len(setup.filters):
        elements.append(Paragraph('<u>Filters</u>', style['subtitle']))
        elements.append(Spacer(1, 5))
    for filter in setup.filters:
        elements.append(Paragraph(filter.name, style['section_body'], bulletText='-'))


    # Outputs statistics
    # NOTE: missing

    elements.append(PageBreak())
    elements.append(Paragraph("<u>Graphs</u>", style['subtitle']))
    elements.append(Spacer(1, 5))
    
    # generate graphs and images
    result_names = [column for column in data.columns if column.startswith('.r_')]
    pie_data = [
        len(data[data[result_names[0]] > 0]),
        len(data[data[result_names[0]] == 0]),
        len(data[data[result_names[0]] < 0])
    ]
    
    plt.figure(figsize=(3, 3))
    p, tx, autotexts = plt.pie(pie_data, labels=['Wins', 'Break-Even', 'Loss'], autopct = '')

    for i, a in enumerate(autotexts):
        a.set_text("{}".format(pie_data[i]))

    plt.title("Result distribution in " + result_names[0][3:], fontsize=10)
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    elements.append(Image(buf))
    
    plt.figure()
    for column in result_names:
        equity = 1000
        points = []
        for i in range(len(data[column])):
            if i == 0:
                points.append(equity + equity * 0.01 * data[column].iloc[i])
            else:
                points.append(points[i - 1] + points[i - 1] * 0.01 * data[column].iloc[i])
        plt.plot(points, label = column[3:])
    plt.title("$1000 investment simulation", fontsize=10)
    plt.legend()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    elements.append(Image(buf))


    # Output the data
    elements.append(NextPageTemplate('landscape'))
    elements.append(PageBreak())

    for i, col in zip(data.dtypes, data):
        if i == 'float64':
            data[col] = data[col].apply(lambda x: format(float(x), ".2f"))

    column_names = []
    for col in data.columns:
        col_name = col
        if col.startswith('.r') or col.startswith('.m_'):
            col_name = col[3:]
        elif col == '.p':
            col_name = 'Pair'

        column_names.append(Paragraph(str(col_name), style['table_header']) )

    df_table = [column_names] + data.values.tolist()
    table_element = Table(df_table, splitByRow=True, repeatRows=1)


    table_element.hAlign = "LEFT"
    table_element.setStyle(TableStyle([
        ('TEXTCOLOR',(0,0),(-1, 0),colors.white),
        ('BACKGROUND',(0,0), (-1, 0), colors.HexColor('#075eee')),
        ('FONT', (0,0), (-1, -1), 'Montserrat'),
        ("BOX", (0, 0), (-1, -1), 0.8, colors.black),
        ("GRID", (0, 0), (-1, -1), 0.4, colors.black),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
    ]))

    elements.append(Paragraph("<u>Data</u>", style['subtitle']))
    elements.append(Spacer(1, 5))
    elements.append(table_element)

    doc.addPageTemplates([
        PageTemplate(id='a4',frames=a4_frame, pagesize=A4),
        PageTemplate(id='landscape',frames=landscape_frame, pagesize=landscape(A4)),
    ])
    doc.build(elements, canvasmaker=NumberedCanvas)
    
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, mimetype='application/pdf',
        attachment_filename='booking.pdf', cache_timeout=0)
    